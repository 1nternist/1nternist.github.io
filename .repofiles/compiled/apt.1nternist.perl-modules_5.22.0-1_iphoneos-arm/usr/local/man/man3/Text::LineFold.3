.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::LineFold 3"
.TH Text::LineFold 3 "2013-11-20" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::LineFold \- Line Folding for Plain Text
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Text::LineFold;
\&    $lf = Text::LineFold\->new();
\&    
\&    # Fold lines
\&    $folded = $lf\->fold($string, \*(AqPLAIN\*(Aq);
\&    $indented = $lf\->fold(\*(Aq \*(Aq x 8, \*(Aq \*(Aq x 4, $string);
\&
\&    # Unfold lines
\&    $unfolded = $lf\->unfold($string, \*(AqFIXED\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::LineFold folds or unfolds lines of plain text.
As it mainly focuses on plain text e\-mail messages,
\&\s-1RFC\s0 3676 flowed format is also supported.
.Sh "Public Interface"
.IX Subsection "Public Interface"
.IP "new ([\s-1KEY\s0 => \s-1VALUE\s0, ...])" 4
.IX Item "new ([KEY => VALUE, ...])"
\&\fIConstructor\fR.
About \s-1KEY\s0 => \s-1VALUE\s0 pairs see config method.
.ie n .IP "$self\->config (\s-1KEY\s0)" 4
.el .IP "\f(CW$self\fR\->config (\s-1KEY\s0)" 4
.IX Item "$self->config (KEY)"
.PD 0
.ie n .IP "$self\->config ([\s-1KEY\s0 => \s-1VAL\s0, ...])" 4
.el .IP "\f(CW$self\fR\->config ([\s-1KEY\s0 => \s-1VAL\s0, ...])" 4
.IX Item "$self->config ([KEY => VAL, ...])"
.PD
\&\fIInstance method\fR.
Get or update configuration.  Following \s-1KEY\s0 => \s-1VALUE\s0 pairs may be specified.
.RS 4
.IP "Charset => \s-1CHARSET\s0" 4
.IX Item "Charset => CHARSET"
Character set that is used to encode string.
It may be string or MIME::Charset object.
Default is \f(CW"UTF\-8"\fR.
.IP "Language => \s-1LANGUAGE\s0" 4
.IX Item "Language => LANGUAGE"
Along with Charset option, this may be used to define language/region
context.
Default is \f(CW"XX"\fR.
See also \*(L"Context\*(R" in Unicode::LineBreak option.
.IP "Newline => \s-1STRING\s0" 4
.IX Item "Newline => STRING"
String to be used for newline sequence.
Default is \f(CW"\en"\fR.
.IP "OutputCharset => \s-1CHARSET\s0" 4
.IX Item "OutputCharset => CHARSET"
Character set that is used to encode result of \fIfold()\fR/\fIunfold()\fR.
It may be string or MIME::Charset object.
If a special value \f(CW"_UNICODE_"\fR is specified, result will be Unicode string.
Default is the value of Charset option.
.IP "TabSize => \s-1NUMBER\s0" 4
.IX Item "TabSize => NUMBER"
Column width of tab stops.
When 0 is specified, tab stops are ignored.
Default is 8.
.IP "BreakIndent" 4
.IX Item "BreakIndent"
.PD 0
.IP "CharMax" 4
.IX Item "CharMax"
.IP "ColMax" 4
.IX Item "ColMax"
.IP "ColMin" 4
.IX Item "ColMin"
.IP "ComplexBreaking" 4
.IX Item "ComplexBreaking"
.IP "EAWidth" 4
.IX Item "EAWidth"
.IP "HangulAsAL" 4
.IX Item "HangulAsAL"
.IP "LBClass" 4
.IX Item "LBClass"
.IP "LegacyCM" 4
.IX Item "LegacyCM"
.IP "Prep" 4
.IX Item "Prep"
.IP "Urgent" 4
.IX Item "Urgent"
.PD
See \*(L"Options\*(R" in Unicode::LineBreak.
.RE
.RS 4
.RE
.ie n .IP "$self\->fold (\s-1STRING\s0, [\s-1METHOD\s0])" 4
.el .IP "\f(CW$self\fR\->fold (\s-1STRING\s0, [\s-1METHOD\s0])" 4
.IX Item "$self->fold (STRING, [METHOD])"
.PD 0
.ie n .IP "$self\->fold (\s-1INITIAL_TAB\s0, \s-1SUBSEQUENT_TAB\s0, \s-1STRING\s0, ...)" 4
.el .IP "\f(CW$self\fR\->fold (\s-1INITIAL_TAB\s0, \s-1SUBSEQUENT_TAB\s0, \s-1STRING\s0, ...)" 4
.IX Item "$self->fold (INITIAL_TAB, SUBSEQUENT_TAB, STRING, ...)"
.PD
\&\fIInstance method\fR.
\&\fIfold()\fR folds lines of string \s-1STRING\s0 and returns it.
Surplus SPACEs and horizontal tabs at end of line are removed,
newline sequences are replaced by that specified by Newline option
and newline is appended at end of text if it does not exist.
Horizontal tabs are treated as tab stops according to TabSize option.
.Sp
By the first style, following options may be specified for \s-1METHOD\s0 argument.
.RS 4
.ie n .IP """FIXED""" 4
.el .IP "\f(CW``FIXED''\fR" 4
.IX Item """FIXED"""
Lines preceded by \f(CW">"\fR won't be folded.
Paragraphs are separated by empty line.
.ie n .IP """FLOWED""" 4
.el .IP "\f(CW``FLOWED''\fR" 4
.IX Item """FLOWED"""
\&\f(CW"Format=Flowed; DelSp=Yes"\fR formatting defined by \s-1RFC\s0 3676.
.ie n .IP """PLAIN""" 4
.el .IP "\f(CW``PLAIN''\fR" 4
.IX Item """PLAIN"""
Default method.  All lines are folded.
.RE
.RS 4
.Sp
Second style is similar to \*(L"\fIwrap()\fR\*(R" in Text::Wrap.
All lines are folded.
\&\s-1INITIAL_TAB\s0 is inserted at beginning of paragraphs and \s-1SUBSEQUENT_TAB\s0
at beginning of other broken lines.
.RE
.ie n .IP "$self\->unfold (\s-1STRING\s0, \s-1METHOD\s0)" 4
.el .IP "\f(CW$self\fR\->unfold (\s-1STRING\s0, \s-1METHOD\s0)" 4
.IX Item "$self->unfold (STRING, METHOD)"
Conjunct folded paragraphs of string \s-1STRING\s0 and returns it.
.Sp
Following options may be specified for \s-1METHOD\s0 argument.
.RS 4
.ie n .IP """FIXED""" 4
.el .IP "\f(CW``FIXED''\fR" 4
.IX Item """FIXED"""
Default method.
Lines preceded by \f(CW">"\fR won't be conjuncted.
Treat empty line as paragraph separator.
.ie n .IP """FLOWED""" 4
.el .IP "\f(CW``FLOWED''\fR" 4
.IX Item """FLOWED"""
Unfold \f(CW"Format=Flowed; DelSp=Yes"\fR formatting defined by \s-1RFC\s0 3676.
.ie n .IP """FLOWEDSP""" 4
.el .IP "\f(CW``FLOWEDSP''\fR" 4
.IX Item """FLOWEDSP"""
Unfold \f(CW"Format=Flowed; DelSp=No"\fR formatting defined by \s-1RFC\s0 3676.
.RE
.RS 4
.RE
.SH "BUGS"
.IX Header "BUGS"
Please report bugs or buggy behaviors to developer.
.PP
\&\s-1CPAN\s0 Request Tracker:
<http://rt.cpan.org/Public/Dist/Display.html?Name=Unicode\-LineBreak>.
.SH "VERSION"
.IX Header "VERSION"
Consult \f(CW$VERSION\fR variable.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Unicode::LineBreak, Text::Wrap.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2009\-2012 Hatuka*nezumi \- \s-1IKEDA\s0 Soji <hatuka(at)nezumi.nu>.
.PP
This program is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.
