NAME
    List::MoreUtils - Provide the stuff missing in List::Util

SYNOPSIS
        use List::MoreUtils qw{
            any all none notall true false
            firstidx first_index lastidx last_index
            insert_after insert_after_string
            apply indexes
            after after_incl before before_incl
            firstval first_value lastval last_value
            each_array each_arrayref
            pairwise natatime
            mesh zip uniq distinct minmax part
        };

DESCRIPTION
    List::MoreUtils provides some trivial but commonly needed functionality
    on lists which is not going to go into List::Util.

    All of the below functions are implementable in only a couple of lines
    of Perl code. Using the functions from this module however should give
    slightly better performance as everything is implemented in C. The
    pure-Perl implementation of these functions only serves as a fallback in
    case the C portions of this module couldn't be compiled on this machine.

    any BLOCK LIST
        Returns a true value if any item in LIST meets the criterion given
        through BLOCK. Sets $_ for each item in LIST in turn:

            print "At least one value undefined"
                if any { ! defined($_) } @list;

        Returns false otherwise, or if LIST is empty.

    all BLOCK LIST
        Returns a true value if all items in LIST meet the criterion given
        through BLOCK, or if LIST is empty. Sets $_ for each item in LIST in
        turn:

            print "All items defined"
                if all { defined($_) } @list;

        Returns false otherwise.

    none BLOCK LIST
        Logically the negation of "any". Returns a true value if no item in
        LIST meets the criterion given through BLOCK, or if LIST is empty.
        Sets $_ for each item in LIST in turn:

            print "No value defined"
                if none { defined($_) } @list;

        Returns false otherwise.

    notall BLOCK LIST
        Logically the negation of "all". Returns a true value if not all
        items in LIST meet the criterion given through BLOCK. Sets $_ for
        each item in LIST in turn:

            print "Not all values defined"
                if notall { defined($_) } @list;

        Returns false otherwise, or if LIST is empty.

    true BLOCK LIST
        Counts the number of elements in LIST for which the criterion in
        BLOCK is true. Sets $_ for each item in LIST in turn:

            printf "%i item(s) are defined", true { defined($_) } @list;

    false BLOCK LIST
        Counts the number of elements in LIST for which the criterion in
        BLOCK is false. Sets $_ for each item in LIST in turn:

            printf "%i item(s) are not defined", false { defined($_) } @list;

    firstidx BLOCK LIST
    first_index BLOCK LIST
        Returns the index of the first element in LIST for which the
        criterion in BLOCK is true. Sets $_ for each item in LIST in turn:

            my @list = (1, 4, 3, 2, 4, 6);
            printf "item with index %i in list is 4", firstidx { $_ == 4 } @list;
            __END__
            item with index 1 in list is 4

        Returns -1 if no such item could be found.

        "first_index" is an alias for "firstidx".

    lastidx BLOCK LIST
    last_index BLOCK LIST
        Returns the index of the last element in LIST for which the
        criterion in BLOCK is true. Sets $_ for each item in LIST in turn:

            my @list = (1, 4, 3, 2, 4, 6);
            printf "item with index %i in list is 4", lastidx { $_ == 4 } @list;
            __END__
            item with index 4 in list is 4

        Returns -1 if no such item could be found.

        "last_index" is an alias for "lastidx".

    insert_after BLOCK VALUE LIST
        Inserts VALUE after the first item in LIST for which the criterion
        in BLOCK is true. Sets $_ for each item in LIST in turn.

            my @list = qw/This is a list/;
            insert_after { $_ eq "a" } "longer" => @list;
            print "@list";
            __END__
            This is a longer list

    insert_after_string STRING VALUE LIST
        Inserts VALUE after the first item in LIST which is equal to STRING.

            my @list = qw/This is a list/;
            insert_after_string "a", "longer" => @list;
            print "@list";
            __END__
            This is a longer list

    apply BLOCK LIST
        Applies BLOCK to each item in LIST and returns a list of the values
        after BLOCK has been applied. In scalar context, the last element is
        returned. This function is similar to "map" but will not modify the
        elements of the input list:

            my @list = (1 .. 4);
            my @mult = apply { $_ *= 2 } @list;
            print "\@list = @list\n";
            print "\@mult = @mult\n";
            __END__
            @list = 1 2 3 4
            @mult = 2 4 6 8

        Think of it as syntactic sugar for

            for (my @mult = @list) { $_ *= 2 }

    before BLOCK LIST
        Returns a list of values of LIST upto (and not including) the point
        where BLOCK returns a true value. Sets $_ for each element in LIST
        in turn.

    before_incl BLOCK LIST
        Same as "before" but also includes the element for which BLOCK is
        true.

    after BLOCK LIST
        Returns a list of the values of LIST after (and not including) the
        point where BLOCK returns a true value. Sets $_ for each element in
        LIST in turn.

            @x = after { $_ % 5 == 0 } (1..9);    # returns 6, 7, 8, 9

    after_incl BLOCK LIST
        Same as "after" but also inclues the element for which BLOCK is
        true.

    indexes BLOCK LIST
        Evaluates BLOCK for each element in LIST (assigned to $_) and
        returns a list of the indices of those elements for which BLOCK
        returned a true value. This is just like "grep" only that it returns
        indices instead of values:

            @x = indexes { $_ % 2 == 0 } (1..10);   # returns 1, 3, 5, 7, 9

    firstval BLOCK LIST
    first_value BLOCK LIST
        Returns the first element in LIST for which BLOCK evaluates to true.
        Each element of LIST is set to $_ in turn. Returns "undef" if no
        such element has been found.

        "first_val" is an alias for "firstval".

    lastval BLOCK LIST
    last_value BLOCK LIST
        Returns the last value in LIST for which BLOCK evaluates to true.
        Each element of LIST is set to $_ in turn. Returns "undef" if no
        such element has been found.

        "last_val" is an alias for "lastval".

    pairwise BLOCK ARRAY1 ARRAY2
        Evaluates BLOCK for each pair of elements in ARRAY1 and ARRAY2 and
        returns a new list consisting of BLOCK's return values. The two
        elements are set to $a and $b. Note that those two are aliases to
        the original value so changing them will modify the input arrays.

            @a = (1 .. 5);
            @b = (11 .. 15);
            @x = pairwise { $a + $b } @a, @b;   # returns 12, 14, 16, 18, 20

            # mesh with pairwise
            @a = qw/a b c/;
            @b = qw/1 2 3/;
            @x = pairwise { ($a, $b) } @a, @b;  # returns a, 1, b, 2, c, 3

    each_array ARRAY1 ARRAY2 ...
        Creates an array iterator to return the elements of the list of
        arrays ARRAY1, ARRAY2 throughout ARRAYn in turn. That is, the first
        time it is called, it returns the first element of each array. The
        next time, it returns the second elements. And so on, until all
        elements are exhausted.

        This is useful for looping over more than one array at once:

            my $ea = each_array(@a, @b, @c);
            while ( my ($a, $b, $c) = $ea->() )   { .... }

        The iterator returns the empty list when it reached the end of all
        arrays.

        If the iterator is passed an argument of '"index"', then it retuns
        the index of the last fetched set of values, as a scalar.

    each_arrayref LIST
        Like each_array, but the arguments are references to arrays, not the
        plain arrays.

    natatime EXPR, LIST
        Creates an array iterator, for looping over an array in chunks of $n
        items at a time. (n at a time, get it?). An example is probably a
        better explanation than I could give in words.

        Example:

            my @x = ('a' .. 'g');
            my $it = natatime 3, @x;
            while (my @vals = $it->())
            {
                print "@vals\n";
            }

        This prints

            a b c
            d e f
            g

    mesh ARRAY1 ARRAY2 [ ARRAY3 ... ]
    zip ARRAY1 ARRAY2 [ ARRAY3 ... ]
        Returns a list consisting of the first elements of each array, then
        the second, then the third, etc, until all arrays are exhausted.

        Examples:

            @x = qw/a b c d/;
            @y = qw/1 2 3 4/;
            @z = mesh @x, @y;       # returns a, 1, b, 2, c, 3, d, 4

            @a = ('x');
            @b = ('1', '2');
            @c = qw/zip zap zot/;
            @d = mesh @a, @b, @c;   # x, 1, zip, undef, 2, zap, undef, undef, zot

        "zip" is an alias for "mesh".

    uniq LIST
    distinct LIST
        Returns a new list by stripping duplicate values in LIST. The order
        of elements in the returned list is the same as in LIST. In scalar
        context, returns the number of unique elements in LIST.

            my @x = uniq 1, 1, 2, 2, 3, 5, 3, 4; # returns 1 2 3 5 4
            my $x = uniq 1, 1, 2, 2, 3, 5, 3, 4; # returns 5

    minmax LIST
        Calculates the minimum and maximum of LIST and returns a two element
        list with the first element being the minimum and the second the
        maximum. Returns the empty list if LIST was empty.

        The "minmax" algorithm differs from a naive iteration over the list
        where each element is compared to two values being the so far
        calculated min and max value in that it only requires 3n/2 - 2
        comparisons. Thus it is the most efficient possible algorithm.

        However, the Perl implementation of it has some overhead simply due
        to the fact that there are more lines of Perl code involved.
        Therefore, LIST needs to be fairly big in order for "minmax" to win
        over a naive implementation. This limitation does not apply to the
        XS version.

    part BLOCK LIST
        Partitions LIST based on the return value of BLOCK which denotes
        into which partition the current value is put.

        Returns a list of the partitions thusly created. Each partition
        created is a reference to an array.

            my $i = 0;
            my @part = part { $i++ % 2 } 1 .. 8;   # returns [1, 3, 5, 7], [2, 4, 6, 8]

        You can have a sparse list of partitions as well where non-set
        partitions will be undef:

            my @part = part { 2 } 1 .. 10;          # returns undef, undef, [ 1 .. 10 ]

        Be careful with negative values, though:

            my @part = part { -1 } 1 .. 10;
            __END__
            Modification of non-creatable array value attempted, subscript -1 ...

        Negative values are only ok when they refer to a partition
        previously created:

            my @idx  = ( 0, 1, -1 );
            my $i    = 0;
            my @part = part { $idx[$++ % 3] } 1 .. 8; # [1, 4, 7], [2, 3, 5, 6, 8]

EXPORTS
    Nothing by default. To import all of this module's symbols, do the
    conventional

        use List::MoreUtils ':all';

    It may make more sense though to only import the stuff your program
    actually needs:

        use List::MoreUtils qw{ any firstidx };

ENVIRONMENT
    When "LIST_MOREUTILS_PP" is set, the module will always use the
    pure-Perl implementation and not the XS one. This environment variable
    is really just there for the test-suite to force testing the Perl
    implementation, and possibly for reporting of bugs. I don't see any
    reason to use it in a production environment.

BUGS
    There is a problem with a bug in 5.6.x perls. It is a syntax error to
    write things like:

        my @x = apply { s/foo/bar/ } qw{ foo bar baz };

    It has to be written as either

        my @x = apply { s/foo/bar/ } 'foo', 'bar', 'baz';

    or

        my @x = apply { s/foo/bar/ } my @dummy = qw/foo bar baz/;

    Perl 5.5.x and Perl 5.8.x don't suffer from this limitation.

    If you have a functionality that you could imagine being in this module,
    please drop me a line. This module's policy will be less strict than
    List::Util's when it comes to additions as it isn't a core module.

    When you report bugs, it would be nice if you could additionally give me
    the output of your program with the environment variable
    "LIST_MOREUTILS_PP" set to a true value. That way I know where to look
    for the problem (in XS, pure-Perl or possibly both).

SUPPORT
    Bugs should always be submitted via the CPAN bug tracker.

    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=List-MoreUtils>

THANKS
    Credits go to a number of people: Steve Purkis for giving me namespace
    advice and James Keenan and Terrence Branno for their effort of keeping
    the CPAN tidier by making List::Utils obsolete.

    Brian McCauley suggested the inclusion of apply() and provided the
    pure-Perl implementation for it.

    Eric J. Roode asked me to add all functions from his module
    "List::MoreUtil" into this one. With minor modifications, the pure-Perl
    implementations of those are by him.

    The bunch of people who almost immediately pointed out the many problems
    with the glitchy 0.07 release (Slaven Rezic, Ron Savage, CPAN testers).

    A particularly nasty memory leak was spotted by Thomas A. Lowery.

    Lars Thegler made me aware of problems with older Perl versions.

    Anno Siegel de-orphaned each_arrayref().

    David Filmer made me aware of a problem in each_arrayref that could
    ultimately lead to a segfault.

    Ricardo Signes suggested the inclusion of part() and provided the
    Perl-implementation.

    Robin Huston kindly fixed a bug in perl's MULTICALL API to make the
    XS-implementation of part() work.

TODO
    A pile of requests from other people is still pending further processing
    in my mailbox. This includes:

    *   List::Util export pass-through

        Allow List::MoreUtils to pass-through the regular List::Util
        functions to end users only need to "use" the one module.

    *   uniq_by(&@)

        Use code-reference to extract a key based on which the uniqueness is
        determined. Suggested by Aaron Crane.

    *   delete_index

    *   random_item

    *   random_item_delete_index

    *   list_diff_hash

    *   list_diff_inboth

    *   list_diff_infirst

    *   list_diff_insecond

        These were all suggested by Dan Muey.

    *   listify

        Always return a flat list when either a simple scalar value was
        passed or an array-reference. Suggested by Mark Summersault.

SEE ALSO
    List::Util

AUTHOR
    Adam Kennedy <adamk@cpan.org>

    Tassilo von Parseval <tassilo.von.parseval@rwth-aachen.de>

COPYRIGHT AND LICENSE
    Some parts copyright 2011 Aaron Crane.

    Copyright 2004 - 2010 by Tassilo von Parseval

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, either Perl version 5.8.4 or, at
    your option, any later version of Perl 5 you may have available.

