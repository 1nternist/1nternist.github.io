=encoding utf8

=head1 NAME

perl5216delta - what is new for perl v5.21.6

=head1 DESCRIPTION

This document describes differences between the 5.21.5 release and the 5.21.6
release.

If you are upgrading from an earlier release such as 5.21.4, first read
L<perl5215delta>, which describes differences between 5.21.4 and 5.21.5.

=head1 Core Enhancements

=head2 List form of pipe open implemented for Win32

The list form of pipe:

  open my $fh, "-|", "program", @arguments;

is now implemented on Win32.  It has the same limitations as C<system
LIST> on Win32, since the Win32 API doesn't accept program arguments
as a list.

=head2 Assignment to list repetition

C<(...) x ...> can now be used within a list that is assigned to, as long
as the left-hand side is a valid lvalue.  This allows C<(undef,undef,$foo)
= that_function()> to be written as C<((undef)x2, $foo) = that_function()>.

=head2 C<close> now sets C<$!>

When an I/O error occurs, the fact that there has been an error is recorded
in the handle.  C<close> returns false for such a handle.  Previously, the
value of C<$!> would be untouched by C<close>, so the common convention of
writing C<close $fh or die $!> did not work reliably.  Now the handle
records the value of C<$!>, too, and C<close> restores it.

=head1 Deprecations

=head2 Use of non-graphic characters in single-character variable names

The syntax for single-character variable names is more lenient than
for longer variable names, allowing the one-character name to be a
punctuation character or even invisible (a non-graphic).  Perl v5.20
deprecated the ASCII-range controls as such a name.  Now, all
non-graphic characters that formerly were allowed are deprecated.
The practical effect of this occurs only when not under C<S<"use
utf8">>, and affects just the C1 controls (code points 0x80 through
0xFF), NO-BREAK SPACE, and SOFT HYPHEN.

=head2 Inlining of C<sub () { $var }> with observable side-effects

In many cases Perl makes sub () { $var } into an inlinable constant
subroutine, capturing the value of $var at the time the C<sub> expression
is evaluated.  This can break the closure behaviour in those cases where
$var is subsequently modified.  The subroutine won't return the new value.

This usage is now deprecated in those cases where the variable could be
modified elsewhere.  Perl detects those cases and emits a deprecation
warning.  Such code will likely change in the future and stop producing a
constant.

If your variable is only modified in the place where it is declared, then
Perl will continue to make the sub inlinable with no warnings.

    sub make_constant {
        my $var = shift;
        return sub () { $var }; # fine
    }

    sub make_constant_deprecated {
        my $var;
        $var = shift;
        return sub () { $var }; # deprecated
    }

    sub make_constant_deprecated2 {
        my $var = shift;
        log_that_value($var); # could modify $var
        return sub () { $var }; # deprecated
    }

In the second example above, detecting that $var is assigned to only once
is too hard to detect.  That it happens in a spot other than the C<my>
declaration is enough for Perl to find it suspicious.

This deprecation warning happens only for a simple variable for the body of
the sub.  (A C<BEGIN> block or C<use> statement inside the sub is ignored,
because it does not become part of the sub's body.)  For more complex
cases, such as C<sub () { do_something() if 0; $var }> the behaviour has
changed such that inlining does not happen if the variable is modifiable
elsewhere.  Such cases should be rare.

=head1 Performance Enhancements

=over 4

=item *

C<(...)x1>, C<("constant")x0> and C<($scalar)x0> are now optimised in list
context.  If the right-hand argument is a constant 1, the repetition
operator disappears.  If the right-hand argument is a constant 0, the whole
expressions is optimised to the empty list, so long as the left-hand
argument is a simple scalar or constant.  C<(foo())x0> is not optimised.

=item *

C<substr> assignment is now optimised into 4-argument C<substr> at the end
of a subroutine (or as the argument to C<return>).  Previously, this
optimisation only happened in void context.

=item *

Assignment to lexical variables is often optimised away.  For instance, in
C<$lexical = chr $foo>, the C<chr> operator writes directly to the lexical
variable instead of returning a value that gets copied.  This optimisation
has been extended to C<split>, C<x> and C<vec> on the right-hand side.  It
has also been made to work with state variable initialization.

=item *

In "\L...", "\Q...", etc., the extra "stringify" op is now optimised away,
making these just as fast as C<lcfirst>, C<quotemeta>, etc.

=item *

Assignment to an empty list is now sometimes faster.  In particular, it
never calls C<FETCH> on tied arguments on the right-hand side, whereas it
used to sometimes.

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<B> has been upgraded from version 1.52 to 1.53.

=item *

L<B::Concise> has been upgraded from version 0.994 to 0.995.

=item *

L<B::Deparse> has been upgraded from version 1.29 to 1.30.

It now deparses C<+sub : attr { ... }> correctly at the start of a
statement.  Without the initial C<+>, C<sub> would be a statement label.

C<BEGIN> blocks are now emitted in the right place most of the time, but
the change unfortunately introduced a regression, in that C<BEGIN> blocks
occurring just before the end of the enclosing block may appear below it
instead.  So this change may need to be reverted if it cannot be fixed
before Perl 5.22.  [perl #77452]

B::Deparse no longer puts erroneous C<local> here and there, such as for
C<LIST = tr/a//d>.  [perl #119815]

Adjacent C<use> statements are no longer accidentally nested if one
contains a C<do> block.  [perl #115066]

=item *

L<B::Op_private> has been upgraded from version 5.021005 to 5.021006.

It now includes a hash named C<%ops_using>, list all op types that use a
particular private flag.

=item *

L<CPAN::Meta> has been upgraded from version 2.142690 to 2.143240.

=item *

L<CPAN::Meta::Requirements> has been upgraded from version 2.128 to 2.130.

=item *

L<Devel::Peek> has been upgraded from version 1.18 to 1.19.

=item *

L<Digest::SHA> has been upgraded from version 5.92 to 5.93.

=item *

L<DynaLoader> has been upgraded from version 1.27 to 1.28.

=item *

L<Encode> has been upgraded from version 2.62 to 2.64.

=item *

L<experimental> has been upgraded from version 0.012 to 0.013.

=item *

L<Exporter> has been upgraded from version 5.71 to 5.72.

=item *

L<ExtUtils::MakeMaker> has been upgraded from version 6.98 to 7.02.

=item *

L<ExtUtils::Manifest> has been upgraded from version 1.68 to 1.69.

=item *

L<ExtUtils::ParseXS> has been upgraded from version 3.25 to 3.26.

=item *

L<HTTP::Tiny> has been upgraded from version 0.050 to 0.051.

=item *

L<I18N::Langinfo> has been upgraded from version 0.11 to 0.12.

=item *

L<IO::Socket> has been upgraded from version 1.37 to 1.38.

Document the limitations of the connected() method.  [perl #123096]

=item *

L<locale> has been upgraded from version 1.04 to 1.05.

=item *

L<Module::CoreList> has been upgraded from version 5.20141020 to 5.20141120.

=item *

L<overload> has been upgraded from version 1.23 to 1.24.

=item *

L<PerlIO::encoding> has been upgraded from version 0.19 to 0.20.

=item *

L<PerlIO::scalar> has been upgraded from version 0.19 to 0.20.

=item *

L<POSIX> has been upgraded from version 1.45 to 1.46.

=item *

L<re> has been upgraded from version 0.27 to 0.28.

=item *

L<Test::Harness> has been upgraded from version 3.33 to 3.34.

=item *

L<Test::Simple> has been upgraded from version 1.001008 to 1.301001_075.

=item *

L<Unicode::UCD> has been upgraded from version 0.58 to 0.59.

=item *

L<warnings> has been upgraded from version 1.28 to 1.29.

=item *

L<XSLoader> has been upgraded from version 0.18 to 0.19.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perldata/Identifier parsing>

=over 4

=item *

The syntax of single-character variable names has been brought
up-to-date and more fully explained.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Warnings

=over 4

=item *

L<Use of literal non-graphic characters in variable names is deprecated|perldiag/"Use of literal non-graphic characters in variable names is deprecated">

=item *

A new C<locale> warning category has been created, with the following warning
messages currently in it:

=over 4

=item *

L<Locale '%s' may not work well.%s|perldiag/Locale '%s' may not work well.%s>

=item *

L<Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".|perldiag/Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".>

=back

=item *

L<Warning: unable to close filehandle %s properly: %s|perldiag/"Warning: unable to close filehandle %s properly: %s">

=item *

The following two warnings for C<tr///> used to be skipped if the
transliteration contained wide characters, but now they occur regardless of
whether there are wide characters or not:

L<Useless use of E<sol>d modifier in transliteration operator|perldiag/"Useless use of /d modifier in transliteration operator">

L<Replacement list is longer than search list|perldiag/Replacement list is longer than search list>

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<Quantifier unexpected on zero-length expression in regex mE<sol>%sE<sol>|perldiag/"Quantifier unexpected on zero-length expression in regex m/%s/">.

This message has had the S<"<-- HERE"> marker removed, as it was always
placed at the end of the regular expression, regardless of where the
problem actually occurred.  [perl #122680]

=item *

L<Setting $E<sol> to a reference to %s as a form of slurp is deprecated, treating as undef|perldiag/"Setting $/ to a reference to %s as a form of slurp is deprecated, treating as undef">

This warning is now a default warning, like other deprecation warnings.

=back

=head1 Configuration and Compilation

=over 4

=item *

F<Configure> with C<-Dmksymlinks> should now be faster. [perl #122002]

=back

=over 4

=item *

As well as the gzip and bzip2 tarballs, this release has been made available as an xz utils compressed tarball.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=head3 Win32

=over 4

=item *

In the experimental C<:win32> layer, a crash in C<open> was fixed. Also
opening C</dev/null>, which works the Win32 Perl's normal C<:unix> layer, was
implemented for C<:win32>.
L<[perl #122224]|https://rt.perl.org/Ticket/Display.html?id=122224>

=item *

A new makefile option, C<USE_LONG_DOUBLE>, has been added to the Windows
dmake makefile for gcc builds only.  Set this to "define" if you want perl to
use long doubles to give more accuracy and range for floating point numbers.

=back

=head1 Internal Changes

=over 4

=item *

C<screaminstr> has been removed. Although marked as public API, it is
undocumented and has no usage in modern perl versions on CPAN Grep. Calling it
has been fatal since 5.17.0.

=item *

C<newDEFSVOP>, C<block_start>, C<block_end> and C<intro_my> have been added
to the API.

=item *

The internal C<convert> function in F<op.c> has been renamed
C<op_convert_list> and added to the API.

=item *

C<sv_magic> no longer forbids "ext" magic on read-only values.  After all,
perl can't know whether the custom magic will modify the SV or not.
[perl #123103]

=item *

Starting in 5.21.6, accessing L<perlapi/CvPADLIST> in an XSUB is forbidden.
CvPADLIST has be reused for a different internal purpose for XSUBs. Guard all
CvPADLIST expressions with C<CvISXSUB()> if your code doesn't already block
XSUB CV*s from going through optree CV* expecting code.

=back


=head1 Selected Bug Fixes

=over 4

=item *

fchmod() and futimes() now set C<$!> when they fail due to being
passed a closed file handle.  [perl #122703]

=item *

Perl now comes with a corrected Unicode 7.0 for the erratum issued on
October 21, 2014 (see L<http://www.unicode.org/errata/#current_errata>),
dealing with glyph shaping in Arabic.

=item *

op_free() no longer crashes due to a stack overflow when freeing a
deeply recursive op tree. [perl #108276]

=item *

scalarvoid() would crash due to a stack overflow when processing a
deeply recursive op tree. [perl #108276]

=item *

In Perl 5.20.0, C<$^N> accidentally had the internal UTF8 flag turned off
if accessed from a code block within a regular expression, effectively
UTF8-encoding the value.  This has been fixed.  [perl #123135]

=item *

A failed C<semctl> call no longer overwrites existing items on the stack,
causing C<(semctl(-1,0,0,0))[0]> to give an "uninitialized" warning.

=item *

C<else{foo()}> with no space before C<foo> is now better at assigning the
right line number to that statement.  [perl #122695]

=item *

Sometimes the assignment in C<@array = split> gets optimised and C<split>
itself writes directly to the array.  This caused a bug, preventing this
assignment from being used in lvalue context.  So
C<(@a=split//,"foo")=bar()> was an error.  (This bug probably goes back to
Perl 3, when the optimisation was added.)  This optimisation, and the bug,
started to happen in more cases in 5.21.5.  It has now been fixed.
[perl #123057]

=item *

When argument lists that fail the checks installed by subroutine
signatures, the resulting error messages now give the file and line number
of the caller, not of the called subroutine.  [perl #121374]

=item *

Flip-flop operators (C<..> and C<...> in scalar context) used to maintain
a separate state for each recursion level (the number of times the
enclosing sub was called recursively), contrary to the documentation.  Now
each closure has one internal state for each flip-flop.  [perl #122829]

=item *

C<use>, C<no>, statement labels, special blocks (C<BEGIN>) and pod are now
permitted as the first thing in a C<map> or C<grep> block, the block after
C<print> or C<say> (or other functions) returning a handle, and within
C<${...}>, C<@{...}>, etc.  [perl #122782]

=item *

The repetition operator C<x> now propagates lvalue context to its left-hand
argument when used in contexts like C<foreach>.  That allows
C<for(($#that_array)x2) { ... }> to work as expected if the loop modifies
$_.

=item *

C<(...) x ...> in scalar context used to corrupt the stack if one operand
were an object with "x" overloading, causing erratic behaviour.
[perl #121827]

=item *

Assignment to a lexical scalar is often optimised away (as mentioned under
L</Performance Enhancements>).  Various bugs related to this optimisation
have been fixed.  Certain operators on the right-hand side would sometimes
fail to assign the value at all or assign the wrong value, or would call
STORE twice or not at all on tied variables.  The operators affected were
C<$foo++>, C<$foo-->, and C<-$foo> under C<use integer>, C<chomp>, C<chr>
and C<setpgrp>.

=item *

List assignments were sometimes buggy if the same scalar ended up on both
sides of the assignment due to used of C<tied>, C<values> or C<each>.  The
result would be the wrong value getting assigned.

=item *

C<setpgrp($nonzero)> (with one argument) was accidentally changed in 5.16
to mean C<setpgrp(0)>.  This has been fixed.

=item *

C<__SUB__> could return the wrong value or even corrupt memory under the
debugger (the B<-d> switch) and in subs containing C<eval $string>.

=item *

When C<sub () { $var }> becomes inlinable, it now returns a different
scalar each time, just as a non-inlinable sub would, though Perl still
optimises the copy away in cases where it would make no observable
difference.

=item *

C<my sub f () { $var }> and C<sub () : attr { $var }> are no longer
eligible for inlining.  The former would crash; the latter would just
throw the attributes away.  An exception is made for the little-known
":method" attribute, which does nothing much.

=item *

Inlining of subs with an empty prototype is now more consistent than
before.  Previously, a sub with multiple statements, all but the last
optimised away, would be inlinable only if it were an anonymous sub
containing a string C<eval> or C<state> declaration or closing over an
outer lexical variable (or any anonymous sub under the debugger).  Now any
sub that gets folded to a single constant after statements have been
optimised away is eligible for inlining.  This applies to things like C<sub
() { jabber() if DEBUG; 42 }>.

Some subroutines with an explicit C<return> were being made inlinable,
contrary to the documentation,  Now C<return> always prevents inlining.

=item *

On some systems, such as VMS, C<crypt> can return a non-ASCII string.  If a
scalar assigned to had contained a UTF8 string previously, then C<crypt>
would not turn off the UTF8 flag, thus corrupting the return value.  This
would happen with C<$lexical = crypt ...>.

=item *

C<crypt> no longer calls C<FETCH> twice on a tied first argument.

=item *

An unterminated here-doc on the last line of a quote-like operator
(C<qq[${ <<END }]>, C</(?{ <<END })/>) no longer causes a double free.  It
started doing so in 5.18.

=item *

Fixed two assertion failures introduced into C<-DPERL_OP_PARENT>
builds. [perl #108276]

=back

=head1 Known Problems

=over 4

=item *

Builds on FreeBSD 10.x currently fail when compiling L<POSIX>. A workaround is
to specify C<-Ui_fenv> when running C<Configure>.

=back

=head1 Errata From Previous Releases

=over 4

=item *

Due to a mistake in the string-copying logic, copying the value of a state
variable could instead steal the value and undefine the variable.  This
bug, introduced in 5.20, would happen mostly for long strings (1250 chars
or more), but could happen for any strings under builds with copy-on-write
disabled.  [perl #123029]

This bug was actually fixed in 5.21.5, but it was not until after that
release that this bug, and the fact that it had been fixed, were
discovered.

=item *

If a named sub tries to access a scalar declared in an outer anonymous sub,
the variable is not available, so the named sub gets its own undefined
scalar.  In 5.10, attempts to take a reference to the variable
(C<\$that_variable>) began returning a reference to a I<copy> of it
instead.  This was accidentally fixed in 5.21.4, but the bug and its fix
were not noticed till now.

=back

=head1 Acknowledgements

Perl 5.21.6 represents approximately 4 weeks of development since Perl 5.21.5
and contains approximately 60,000 lines of changes across 920 files from 25
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 48,000 lines of changes to 630 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.21.6:

Aaron Crane, Abigail, Andrew Fresh, Andy Dougherty, Brian Fraser, Chad Granum,
Chris 'BinGOs' Williams, Craig A. Berry, Daniel Dragan, David Mitchell, Doug
Bell, Father Chrysostomos, Glenn D. Golden, James E Keenan, Jarkko Hietaniemi,
Jim Cromie, Karen Etheridge, Karl Williamson, Lukas Mai, Ricardo Signes, Shlomi
Fish, Slaven Rezic, Steve Hay, Tony Cook, Yaroslav Kuzmin.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
