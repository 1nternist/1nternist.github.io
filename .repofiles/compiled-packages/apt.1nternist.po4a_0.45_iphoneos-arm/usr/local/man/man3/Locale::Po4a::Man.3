.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Locale::Po4a::Man 3"
.TH Locale::Po4a::Man 3 "2015-01-23" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::Po4a::Man \- convert manual pages from/to PO files
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The po4a (\s-1PO\s0 for anything) project goal is to ease translations (and more
interestingly, the maintenance of translations) using gettext tools on
areas where they were not expected like documentation.
.PP
Locale::Po4a::Man is a module to help the translation of documentation in
the nroff format (the language of manual pages) into other [human]
languages.
.SH "TRANSLATING WITH PO4A::MAN"
.IX Header "TRANSLATING WITH PO4A::MAN"
This module tries pretty hard to make translator's life easier. For that,
the text presented to translators isn't a verbatim copy of the text found
in the man page. Indeed, the cruder parts of the nroff format are hidden, so
that translators can't mess up with them.
.Sh "Text wrapping"
.IX Subsection "Text wrapping"
Unindented paragraphs are automatically rewrapped for the translator.  This
can lead to some minor difference in the generated output, since the
rewrapping rules used by groff aren't very clear. For example, two spaces
after a parenthesis are sometimes preserved.
.PP
Anyway, the difference will only be about the position of the extra spaces
in wrapped paragraph, and I think it's worth.
.Sh "Font specification"
.IX Subsection "Font specification"
The first change is about font change specifications.  In nroff, there are
several ways to specify if a given word should be written in small, bold or
italics. In the text to translate, there is only one way, borrowed from the
\&\s-1POD\s0 (Perl online documentation) format:
.IP "I<text> \*(-- italic text" 4
.IX Item "I<text>  italic text"
equivalent to \efItext\efP or \*(L".I text\*(R"
.IP "B<text> \*(-- bold text" 4
.IX Item "B<text>  bold text"
equivalent to \efBtext\efP or \*(L".B text\*(R"
.IP "R<text> \*(-- roman text" 4
.IX Item "R<text>  roman text"
equivalent to \efRtext\efP
.IP "CW<text> \*(-- constant width text" 4
.IX Item "CW<text>  constant width text"
equivalent to \ef(CWtext\efP or \*(L".CW text\*(R"
.PP
Remark: The \s-1CW\s0 face is not available for all groff devices. It is not
recommended to use it. It is provided for your convenience.
.Sh "Automatic characters transliteration"
.IX Subsection "Automatic characters transliteration"
Po4a automatically transliterate some characters to ease the translation
or the review of the translation.
Here is the list of the transliterations:
.IP "hyphens" 4
.IX Item "hyphens"
Hyphens (\-) and minus signs (\e\-) in man pages are all transliterated
as simple dashes (\-) in the \s-1PO\s0 file.  Then all dash are transliterated into
roff minus signs (\e\-) when the translation is inserted into the output
document.
.Sp
Translators can force an hyphen by using the roff glyph '\e[hy]' in their
translations.
.IP "non-breaking spaces" 4
.IX Item "non-breaking spaces"
Translators can use non-breaking spaces in their translations.  These
non-breaking spaces (0xA0 in latin1) will be transliterated into a roff
non-breaking space ('\e ').
.IP "quotes transliterations" 4
.IX Item "quotes transliterations"
`` and '' are respectively tranliterated into \e*(lq and \e*(rq.
.Sp
To avoid these transliterations, translators can insert a zero width roff
character (i.e., using `\e&` or '\e&' respectively).
.Sh "Putting '<' and '>' in translations"
.IX Subsection "Putting '<' and '>' in translations"
Since these chars are used to delimit parts under font modification, you
can't use them verbatim. Use E<lt> and E<gt> instead (as in
\&\s-1POD\s0, one more time).
.SH "OPTIONS ACCEPTED BY THIS MODULE"
.IX Header "OPTIONS ACCEPTED BY THIS MODULE"
These are this module's particular options:
.IP "\fBdebug\fR" 4
.IX Item "debug"
Activate debugging for some internal mechanisms of this module.
Use the source to see which parts can be debugged.
.IP "\fBverbose\fR" 4
.IX Item "verbose"
Increase verbosity.
.IP "\fBgroff_code\fR" 4
.IX Item "groff_code"
This option permits to change the behavior of the module when it encounter
a .de, .ie or .if section. It can take the following values:
.RS 4
.IP "\fIfail\fR" 4
.IX Item "fail"
This is the default value.
The module will fail when a .de, .ie or .if section is encountered.
.IP "\fIverbatim\fR" 4
.IX Item "verbatim"
Indicates that the .de, .ie or .if sections must be copied as is
from the original to the translated document.
.IP "\fItranslate\fR" 4
.IX Item "translate"
Indicates that the .de, .ie or .if sections will be proposed for the
translation.
You should only use this option if a translatable string is
contained in one of these section. Otherwise, \fIverbatim\fR
should be preferred.
.RE
.RS 4
.RE
.IP "\fBgenerated\fR" 4
.IX Item "generated"
This option specifies that the file was generated, and that po4a should not
try to detect if the man pages was generated from another format.
This permits to use po4a on generated man pages.
This option does not take any argument.
.IP "\fBmdoc\fR" 4
.IX Item "mdoc"
This option is only useful for mdoc pages.
.Sp
It selects a stricter support of the mdoc format by telling po4a not to
translate the '\s-1NAME\s0' section.
mdoc pages whose '\s-1NAME\s0' section is translated won't generate any header or
footer.
.Sp
According to the groff_mdoc page, the \s-1NAME\s0, \s-1SYNOPSIS\s0 and \s-1DESCRIPTION\s0
sections are mandatory.
There are no known issues with translated \s-1SYNOPSIS\s0 or \s-1DESCRIPTION\s0 section,
but you can also specify these sections this way:
 \-o mdoc=NAME,SYNOPSIS,DESCRIPTION
.Sp
This mdoc issue can also be solved with an addendum like this one:
 PO4A\-HEADER:mode=before;position=^.Dd
 .TH \s-1DOCUMENT_TITLE\s0 1 \*(L"Month day, year\*(R" \s-1OS\s0 \*(L"Section Name\*(R"
.PP
The following options permit to specify the behavior of a new macro
(defined with a .de request), or of a macro not supported by po4a.
They take as argument a comma-separated list of macros.
For example:
.PP
.Vb 1
\& \-o noarg=FO,OB,AR \-o translate_joined=BA,ZQ,UX
.Ve
.PP
Note: if a macro is not supported by po4a and if you consider that it is a
standard roff macro, you should submit it to the po4a development team.
.IP "\fBuntranslated\fR" 4
.IX Item "untranslated"
\&\fBuntranslated\fR indicates that this macro (at its arguments) don't have to
be translated.
.IP "\fBnoarg\fR" 4
.IX Item "noarg"
\&\fBnoarg\fR is like \fBuntranslated\fR, except that po4a will verify that no
argument is added to this macro.
.IP "\fBtranslate_joined\fR" 4
.IX Item "translate_joined"
\&\fBtranslate_joined\fR indicates that po4a must propose to translate the
arguments of the macro.
.IP "\fBtranslate_each\fR" 4
.IX Item "translate_each"
With \fBtranslate_each\fR, the arguments will also be proposed for the
translation, except that each one will be translated separately.
.IP "\fBno_wrap\fR" 4
.IX Item "no_wrap"
This option takes as argument a list of comma-separated couples
\&\fIbegin\fR:\fIend\fR, where \fIbegin\fR and \fIend\fR are commands that delimit
the begin and end of a section that should not be rewrapped.
.Sp
Note: no test is done to ensure that an \fIend\fR command matches its
\&\fIbegin\fR command; any ending command stop the no_wrap mode.
If you have a \fIbegin\fR (respectively \fIend\fR) macro that has no \fIend\fR
(respectively \fIbegin\fR), you can specify an existing \fIend\fR (like fi) or
\&\fIbegin\fR (like nf) as a counterpart.
These macros (and their arguments) wont be translated.
.IP "\fBinline\fR" 4
.IX Item "inline"
This option specifies a list of comma-separated macros that must
not split the current paragraph. The string to translate will then contain
\&\fIfoo <.bar baz qux> quux\fR, where \fIbar\fR is the command that
should be inlined, and \fIbaz qux\fR its arguments.
.IP "\fBunknown_macros\fR" 4
.IX Item "unknown_macros"
This option indicates how po4a should behave when an unknown macro is found.
By default, po4a fails with a warning.
It can take the following values: \fBfailed\fR (the default value),
\&\fBuntranslated\fR, \fBnoarg\fR, \fBtranslate_joined\fR, or \fBtranslate_each\fR (see above
for an explanation of these values).
.SH "AUTHORING MAN PAGES COMPLIANT WITH PO4A::MAN"
.IX Header "AUTHORING MAN PAGES COMPLIANT WITH PO4A::MAN"
This module is still very limited, and will always be, because it's not a
real nroff interpreter. It would be possible to do a real nroff
interpreter, to allow authors to use all the existing macros, or even to
define new ones in their pages, but we didn't want to. It would be too
difficult, and we thought it wasn't necessary. We do think that if
manpages' authors want to see their productions translated, they may have to
adapt to ease the work of translators.
.PP
So, the man parser implemented in po4a have some known limitations we are
not really inclined to correct, and which will constitute some pitfalls
you'll have to avoid if you want to see translators taking care of your
documentation.
.Sh "Don't program in nroff"
.IX Subsection "Don't program in nroff"
nroff is a complete programming language, with macro definition,
conditionals and so on. Since this parser isn't a fully featured nroff
interpreter, it will fail on pages using these facilities (There are about
200 such pages on my box).
.Sh "Use the plain macro set"
.IX Subsection "Use the plain macro set"
There are still some macros which are not supported by po4a::man. This is
only because I failed to find any documentation about them. Here is the
list of unsupported macros used on my box. Note that this list isn't
exhaustive since the program fails on the first encountered unsupported
macro. If you have any information about some of these macros, I'll
happily add support for them. Because of these macros, about 250 pages on
my box are inaccessible to po4a::man.
.PP
.Vb 11
\& ..               ."              .AT             .b              .bank
\& .BE              ..br            .Bu             .BUGS           .BY
\& .ce              .dbmmanage      .do                             .En
\& .EP              .EX             .Fi             .hw             .i
\& .Id              .l              .LO             .mf
\& .N               .na             .NF             .nh             .nl
\& .Nm              .ns             .NXR            .OPTIONS        .PB
\& .pp              .PR             .PRE            .PU             .REq
\& .RH              .rn             .S<             .sh             .SI
\& .splitfont       .Sx             .T              .TF             .The
\& .TT              .UC             .ul             .Vb             .zZ
.Ve
.Sh "Hiding text from po4a"
.IX Subsection "Hiding text from po4a"
Sometimes, the author knows that some parts are not translatable, and
should not be extracted by po4a. For example, an option may accept an
\&\fIother\fR argument, and \fIother\fR may also appear as the last item of a
list. In the first case, \fIother\fR should be not be translatable. And in
the second case, \fIother\fR should be translated.
.PP
In such case, the author can avoid po4a to extract some strings, using
some special groff constructs:
.PP
.Vb 1
\& .if !\*(Aqpo4a\*(Aqhide\*(Aq .B other
.Ve
.PP
(this will require the \fB\-o groff_code=verbatim\fR option)
.PP
A new macro can also be defined to automate this:
 .de IR_untranslated
 .    \s-1IR\s0 \e\e$@
 ..
.PP
.Vb 1
\& .IR_untranslated \e\-q ", " \e\-\e\-quiet
.Ve
.PP
(this will require the options \fB\-o groff_code=verbatim\fR and
\&\fB\-o untranslated=IR_untranslated\fR; with this construct, the \fB.if
!'po4a'hide'\fR conditional is not strictly needed since po4a will not parse
the internal of the macro definition)
.PP
or using an alias:
 .als IR_untranslated \s-1IR\s0
.PP
.Vb 1
\& .IR_untranslated \e\-q ", " \e\-\e\-quiet
.Ve
.PP
(this will require the \fB\-o untranslated=als,IR_untranslated\fR option)
.Sh "Conclusion"
.IX Subsection "Conclusion"
To summarise this section, keep simple, and don't try to be clever while
authoring your man pages. A lot of things are possible in nroff, and not
supported by this parser. For example, don't try to mess with \ec to
interrupt the text processing (like 40 pages on my box do). Or, be sure to
put the macro arguments on the same line that the macro itself. I know that
it's valid in nroff, but would complicate too much the parser to be
handled.
.PP
Of course, another possibility is to use another format, more translator
friendly (like \s-1POD\s0 using po4a::pod, or one of the \s-1XML\s0 familly like \s-1SGML\s0),
but thanks to po4a::man it isn't needed anymore. That being said, if the
source format of your documentation is \s-1POD\s0, or \s-1XML\s0, it may be clever to
translate the source format and not this generated one. In most cases,
po4a::man will detect generated pages and issue a warning. It will even
refuse to process \s-1POD\s0 generated pages, because those pages are perfectly
handled by po4a::pod, and because their nroff counterpart defines a lot of
new macros I didn't want to write support for. On my box, 1432 of the 4323
pages are generated from \s-1POD\s0 and will be ignored by po4a::man.
.PP
In most cases, po4a::man will detect the problem and refuse to process the
page, issuing an adapted message. In some rare cases, the program will
complete without warning, but the output will be wrong. Such cases are
called \*(L"bugs\*(R" ;) If you encounter such case, be sure to report this, along
with a fix when possible...
.SH "STATUS OF THIS MODULE"
.IX Header "STATUS OF THIS MODULE"
This module can be used for most of the existing man pages.
.PP
Some tests are regularly run on Linux boxes:
.IP "\(bu" 4
one third of the pages are refused because they were generated from
another format supported by po4a (e.g. \s-1POD\s0 or \s-1SGML\s0).
.IP "\(bu" 4
10% of the remaining pages are rejected with an error (e.g. a
groff macro is not supported).
.IP "\(bu" 4
Then, less than 1% of the pages are accepted silently by po4a, but with
significant issues (i.e. missing words, or new words inserted)
.IP "\(bu" 4
The other pages are usually handled without differences more important
than spacing differences or line rewrapped (font issues in less than 10% of
the processed pages).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fILocale::Po4a::Pod\fR\|(3pm),
\&\fILocale::Po4a::TransTractor\fR\|(3pm),
\&\fIpo4a\fR\|(7)
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Denis Barbier <barbier@linuxfr.org>
\& Nicolas Franc\*,ois <nicolas.francois@centraliens.net>
\& Martin Quinson (mquinson#debian.org)
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2008 by \s-1SPI\s0, inc.
.PP
This program is free software; you may redistribute it and/or modify it
under the terms of \s-1GPL\s0 (see the \s-1COPYING\s0 file).
