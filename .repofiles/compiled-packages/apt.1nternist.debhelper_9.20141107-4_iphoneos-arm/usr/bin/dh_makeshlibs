#!/usr/bin/perl -w

=head1 NAME

dh_makeshlibs - automatically create shlibs file and call dpkg-gensymbols

=cut

use strict;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_makeshlibs> [S<I<debhelper options>>] [B<-m>I<major>] [B<-V>I<[dependencies]>] [B<-n>] [B<-X>I<item>] [S<B<--> I<params>>]

=head1 DESCRIPTION

B<dh_makeshlibs> is a debhelper program that automatically scans for shared
libraries, and generates a shlibs file for the libraries it finds.

It also adds a call to ldconfig in the F<postinst> and F<postrm> scripts (in
v3 mode and above only) to any packages in which it finds shared libraries.

Packages that support multiarch are detected, and
a Pre-Dependency on multiarch-support is set in ${misc:Pre-Depends} ;
you should make sure to put that token into an appropriate place in your
debian/control file for packages supporting multiarch.

=head1 FILES

=over 4

=item debian/I<package>.symbols

=item debian/I<package>.symbols.I<arch>

These symbols files, if present, are passed to L<dpkg-gensymbols(1)> to
be processed and installed. Use the I<arch> specific names if you need
to provide different symbols files for different architectures.

=back

=head1 OPTIONS

=over 4

=item B<-m>I<major>, B<--major=>I<major>

Instead of trying to guess the major number of the library with objdump,
use the major number specified after the -m parameter. This is much less
useful than it used to be, back in the bad old days when this program
looked at library filenames rather than using objdump.

=item B<-V>, B<-V>I<dependencies>

=item B<--version-info>, B<--version-info=>I<dependencies>

By default, the shlibs file generated by this program does not make packages
depend on any particular version of the package containing the shared
library. It may be necessary for you to add some version dependency
information to the shlibs file. If B<-V> is specified with no dependency
information, the current upstream version of the package is plugged into a
dependency that looks like "I<packagename> B<(E<gt>>= I<packageversion>B<)>". Note that in
debhelper compatibility levels before v4, the Debian part of the package
version number is also included. If B<-V> is specified with parameters, the
parameters can be used to specify the exact dependency information needed
(be sure to include the package name).

Beware of using B<-V> without any parameters; this is a conservative setting
that always ensures that other packages' shared library dependencies are at
least as tight as they need to be (unless your library is prone to changing
ABI without updating the upstream version number), so that if the
maintainer screws up then they won't break. The flip side is that packages
might end up with dependencies that are too tight and so find it harder to
be upgraded.

=item B<-n>, B<--noscripts>

Do not modify F<postinst>/F<postrm> scripts.

=item B<-X>I<item>, B<--exclude=>I<item>

Exclude files that contain I<item> anywhere in their filename or directory 
from being treated as shared libraries.

=item B<--add-udeb=>I<udeb>

Create an additional line for udebs in the shlibs file and use I<udeb> as the
package name for udebs to depend on instead of the regular library package.

=item B<--> I<params>

Pass I<params> to L<dpkg-gensymbols(1)>.

=back

=head1 EXAMPLES

=over 4

=item B<dh_makeshlibs>

Assuming this is a package named F<libfoobar1>, generates a shlibs file that
looks something like:
 libfoobar 1 libfoobar1

=item B<dh_makeshlibs -V>

Assuming the current version of the package is 1.1-3, generates a shlibs
file that looks something like:
 libfoobar 1 libfoobar1 (>= 1.1)

=item B<dh_makeshlibs -V 'libfoobar1 (E<gt>= 1.0)'>

Generates a shlibs file that looks something like:
  libfoobar 1 libfoobar1 (>= 1.0)

=back

=cut

init(options => {
	"m=s", => \$dh{M_PARAMS},
	"major=s" => \$dh{M_PARAMS},
	"version-info:s" => \$dh{V_FLAG},
	"add-udeb=s" => \$dh{SHLIBS_UDEB},
});

my $objdump=cross_command("objdump");
my $multiarch=dpkg_architecture_value("DEB_HOST_MULTIARCH");

my $ok=1;

foreach my $package (@{$dh{DOPACKAGES}}) {
	next if is_udeb($package);
	
	my $tmp=tmpdir($package);

	my %seen;
	my $need_ldconfig = 0;
	my $is_multiarch = 0;

	doit("rm", "-f", "$tmp/DEBIAN/shlibs");

	# So, we look for files or links to existing files with names that
	# match "*.so.*". And we only look at real files not
	# symlinks, so we don't accidentally add shlibs data to -dev
	# packages. This may have a few false positives, which is ok,
	# because only if we can get a library name and a major number from
	# objdump is anything actually added.
	my $exclude='';
	my (@udeb_lines, @lib_files);
	if (defined($dh{EXCLUDE_FIND}) && $dh{EXCLUDE_FIND} ne '') {
		$exclude="! \\( $dh{EXCLUDE_FIND} \\) ";
	}
	open (FIND, "find $tmp -type f \\( -name '*.so' -or -name '*.so.*' \\) $exclude | LC_ALL=C sort |");
	while (<FIND>) {
		my ($library, $major);
		push @lib_files, $_;
		if (defined $multiarch && $multiarch ne '' && m,/$multiarch/,) {
			$is_multiarch=1;
		}
		my $ret=`$objdump -p $_`;
		if ($ret=~m/\s+SONAME\s+(.+)\.so\.(.+)/) {
			# proper soname format
			$library=$1;
			$major=$2;
		}
		elsif ($ret=~m/\s+SONAME\s+(.+)-(.+)\.so/) {
			# idiotic crap soname format
			$library=$1;
			$major=$2;
		}

		if (defined($dh{M_PARAMS}) && $dh{M_PARAMS} ne '') {
			$major=$dh{M_PARAMS};
		}
		
		if (! -d "$tmp/DEBIAN") {
			install_dir("$tmp/DEBIAN");
		}
		my $deps=$package;
		if ($dh{V_FLAG_SET}) {
			if ($dh{V_FLAG} ne '') {
				$deps=$dh{V_FLAG};
			}	
			else {
				# Call isnative because it sets $dh{VERSION}
				# as a side effect.
				isnative($package);
				my $version = $dh{VERSION};
				# Old compatibility levels include the
				# debian revision, while new do not.
				if (! compat(3)) {
					# Remove debian version, if any.
					$version =~ s/-[^-]+$//;
				}
				$deps="$package (>= $version)";
			}
		}
		if (defined($library) && defined($major) && defined($deps) &&
		    $library ne '' && $major ne '' && $deps ne '') {
		    	$need_ldconfig=1;
		    	# Prevent duplicate lines from entering the file.
		    	my $line="$library $major $deps";
			if (! $seen{$line}) {
				$seen{$line}=1;
				complex_doit("echo '$line' >>$tmp/DEBIAN/shlibs");
				if (defined($dh{SHLIBS_UDEB}) && $dh{SHLIBS_UDEB} ne '') {
					my $udeb_deps = $deps;
					$udeb_deps =~ s/\Q$package\E/$dh{SHLIBS_UDEB}/e;
			    		$line="udeb: "."$library $major $udeb_deps";
					push @udeb_lines, $line;
				}
			}
		}
	}
	close FIND;

	# Write udeb: lines last.
	foreach (@udeb_lines) {
		complex_doit("echo '$_' >>$tmp/DEBIAN/shlibs");
	}

	# New as of dh_v3.
	if (! compat(2) && ! $dh{NOSCRIPTS} && $need_ldconfig) {
		if (compat(9)) {
			autoscript($package,"postinst","postinst-makeshlibs");
			autoscript($package,"postrm","postrm-makeshlibs");
		} else {
			autoscript($package,"postinst","postinst-makeshlibs-c10");
			autoscript($package,"postrm","postrm-makeshlibs-c10");
		}
	}

	if (-e "$tmp/DEBIAN/shlibs") {
		doit("chmod","0644","$tmp/DEBIAN/shlibs");
		doit("chown","0:0","$tmp/DEBIAN/shlibs");
	}

	# dpkg-gensymbols files
	my $symbols=pkgfile($package, "symbols");
	if (-e $symbols) {
		my @liblist;
		if (! compat(7)) {
			@liblist=map { "-e$_" } @lib_files;
		}
		# -I is used rather than using dpkg-gensymbols
		# own search for symbols files, since that search
		# is not 100% compatible with debhelper. (For example,
		# this supports --ignore being used.)
		$ok = $ok && doit_noerror("dpkg-gensymbols",
			"-p$package", "-I$symbols", "-P$tmp",
			@liblist,
			@{$dh{U_PARAMS}});
		if (-s "$tmp/DEBIAN/symbols" == 0) {
			doit("rm", "-f", "$tmp/DEBIAN/symbols");
		}
	}
	if ($is_multiarch) {
		addsubstvar($package, "misc:Pre-Depends", "multiarch-support");
	}
}

unless ($ok) {
	error "failing due to earlier errors";
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut

# Local Variables:
# indent-tabs-mode: t
# tab-width: 4
# cperl-indent-level: 4
# End:
